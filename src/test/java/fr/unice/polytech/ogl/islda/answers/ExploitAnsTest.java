package fr.unice.polytech.ogl.islda.answers;

import fr.unice.polytech.ogl.islda.decisions.Decision;
import fr.unice.polytech.ogl.islda.decisions.StopDec;
import fr.unice.polytech.ogl.islda.decisions.TransformDec;
import fr.unice.polytech.ogl.islda.extras.ExploitExt;
import fr.unice.polytech.ogl.islda.extras.ScoutExt;
import fr.unice.polytech.ogl.islda.extras.TransformExt;
import fr.unice.polytech.ogl.islda.map.*;
import fr.unice.polytech.ogl.islda.model.Context;
import fr.unice.polytech.ogl.islda.model.Objective;
import fr.unice.polytech.ogl.islda.model.Resource;
import fr.unice.polytech.ogl.islda.parameters.TransformParameters;
import fr.unice.polytech.ogl.islda.utils.DecisionManager;
import fr.unice.polytech.ogl.islda.utils.Utils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

/**
 * @author Pascal Tung
 * @version 14/03/15
 */
public class ExploitAnsTest {
    DecisionManager decisionManager;
    Objective objective;
    Case c;
    List<Resource> listResources = new ArrayList<>(Arrays.asList(new Resource("WOOD", null, null)));
    ExploitExt extras;
    Mapper map;
    Case currentCase;
    Context context;

    @Before
    public void setUp() {
        currentCase = new Case();
        map = new Mapper(currentCase);
        objective = new Objective("WOOD", 10);
        decisionManager = new DecisionManager();
        extras = new ExploitExt(9);
        c = new Case(null, null, 0);
        context = new Context();
        List<Objective> allObjective = new ArrayList<>();
        allObjective.add(objective);
        context.setObjective(allObjective);
    }

    /**
     * Test if we transform when we can finish the secondary resource contract
     */
    @Test
    public void testTransformCanFinishContract() {
        Utils.init();
        Mapper map = new Mapper(new Case());
        DecisionManager dm = new DecisionManager();

        Context context = new Context();
        context.setObjective(new ArrayList<>(Arrays.asList(
                new Objective("PLANK", 500),
                new Objective("FUR", 100),
                new Objective("QUARTZ", 400),
                new Objective("GLASS", 15)
        )));
        context.updatePrimaryRes();
        context.setBudget(100);
        context.setMinimumBudget(30);
        context.setMen(1);
        assertEquals(5, context.getObjective().size());
        assertEquals(200, context.getObjective("WOOD").getAmount());

        ExploitAns ans = new ExploitAns("OK", 12, new ExploitExt(210));
        ans.setResource("WOOD");
        ans.setContext(context);
        ans.init(map);
        ans.nextDecision(dm, map);
        Decision transformFur = new TransformDec(new TransformParameters(new Objective("WOOD", 138)));
        assertEquals(transformFur.toJSON(), dm.getFirstDecisionJson());
        assertNotEquals(1, dm.count());
        TransformAns transformAns = new TransformAns("OK", 10, new TransformExt("PLANK", 500));
        transformAns.setContext(context);

        assertEquals(200, context.getObjective("WOOD").getAmount());
        transformAns.init(map);
        assertEquals(75, context.getObjective("WOOD").getAmount());
        assertEquals(72, context.getObjective("WOOD").getHarvestedAmount());
    }

    /**
     * Test if we transform when we can transform
     */
    @Test
    public void testTransformCanTransform() {
        Utils.init(); // Custom serialization transform
        Mapper map = new Mapper(new Case());
        DecisionManager dm = new DecisionManager();

        Context context = new Context();
        context.setBudget(100);
        context.setMinimumBudget(30);
        context.setMen(1);
        context.setObjective(new ArrayList<>(Arrays.asList(new Objective("LEATHER", 10), new Objective("FUR", 3))));
        context.updatePrimaryRes();
        assertEquals(33, context.getObjective("FUR").getAmount());

        ExploitAns ans = new ExploitAns("OK", 12, new ExploitExt(6));
        ans.setResource("FUR");
        ans.setContext(context);

        ans.init(map);
        ans.nextDecision(dm, map);
        Decision transformFur = new TransformDec(new TransformParameters(new Objective("FUR", 6)));
        assertEquals(transformFur.toJSON(), dm.getFirstDecisionJson());
        assertNotEquals(1, dm.count());
        assertEquals(0, context.getObjective("FUR").getHarvestedAmount());
    }

    /**
     * Test if we transform when we can transform useless resource
     */
    @Test
    public void testTransformCanTransformUseless() {
        Utils.init(); // Custom serialization transform
        Mapper map = new Mapper(new Case());
        DecisionManager dm = new DecisionManager();

        Context context = new Context();
        context.setObjective(new ArrayList<>(Arrays.asList(
            new Objective("PLANK", 500),
            new Objective("FUR", 100),
            new Objective("QUARTZ", 400),
            new Objective("GLASS", 15)
        )));
        context.updatePrimaryRes();
        context.setBudget(100);
        context.setMinimumBudget(30);
        context.setMen(1);

        ExploitAns ans = new ExploitAns("OK", 12, new ExploitExt(151));
        ans.setResource("QUARTZ");
        ans.setContext(context);

        ans.init(map);
        ans.nextDecision(dm, map);
        assertFalse(dm.getFirstDecisionJson().contains("transform"));
        assertNotEquals(1, dm.count());

        dm.clean();
        context.getObjective("WOOD").setHarvestedAmount(2);
        ans.nextDecision(dm, map);
        Decision transformPlank = new TransformDec(new TransformParameters(
            Arrays.asList(new Objective("WOOD", 2))));
        assertEquals(transformPlank.toJSON(), dm.getFirstDecisionJson());
        assertNotEquals(1, dm.count());
    }

    /**
     * Check if the resource is removed from the case when it's exploited by the robot
     */
    @Test
    public void testResAfterExploitAndScout(){
        Context context = new Context();
        List<Objective> listObj = new ArrayList<>();
        listObj.add(objective);
        context.setObjective(listObj);
        currentCase.setResources(listResources);
        ExploitAns exp = new ExploitAns("OK", 1, extras);
        exp.setContext(context);
        exp.setResource("WOOD");
        exp.init(map);

        assertEquals(0, currentCase.getResources().size());
        assertEquals(0, currentCase.getAltitude());

        Case caseS = new Case();
        ScoutExt sExt = new ScoutExt(Utils.listResourceToListString(listResources), 10);
        ScoutAns scout = new ScoutAns("OK",1,sExt);
        scout.setDirection(Direction.NORTH);
        map.move(Direction.SOUTH);
        scout.init(map);

        assertEquals(10, currentCase.getAltitude());
        assertEquals(0, currentCase.getResources().size());

    }

    /**
     * On exploite 9 sur 10 WOOD, donc il reste 1 WOOD.
     * Check if the robot scouts the unknown cases around it
     */
    @Test
    public void testNextDecisionWithUnknownCases() {
        ExploitAns answer = new ExploitAns("OK", 30, extras);
        answer.setResource(objective.getResource());
        answer.setContext(context);
        Mapper map = new Mapper(c);
        answer.init(map);
        String decision = answer.nextDecision(decisionManager, map);
        DecisionManager oracle = new DecisionManager();

        assertEquals(9, objective.getHarvestedAmount());
        assertEquals(4, decisionManager.count());
        assertEquals(decision, oracle.getGlimpseJson(Direction.NORTH, 4));
    }

    /**
     * On exploite 9 sur 10 WOOD, donc il reste 1 WOOD.
     * Check if the robot goes in the direction with the resource when the cases around it are known
     */
    @Test
    public void testNextDecisionWithKnownCasesWithObj() {
        Mapper map = new Mapper(c);
        Case NCase = new Case(new ArrayList<Resource>(), null, 2);
        NCase.addBiome(new Biome(BiomeEnum.MANGROVE, 85.0));
        NCase.setY(1);
        Case ECase = new Case(new ArrayList<Resource>(), null, 0);
        ECase.addBiome(new Biome(BiomeEnum.BEACH, 85.0));
        ECase.addBiome(new Biome(BiomeEnum.MANGROVE, 15.0));
        ECase.setX(1);
        Case SCase = new Case(new ArrayList<Resource>(), null, 6);
        SCase.addBiome(new Biome(BiomeEnum.OCEAN, 100.0));
        SCase.setY(-1);
        Case WCase = new Case(new ArrayList<Resource>(), null, -3);
        WCase.addBiome(new Biome(BiomeEnum.OCEAN, 100.0));
        WCase.setX(-1);

        map.addCase(NCase);
        map.addCase(ECase);
        map.addCase(SCase);
        map.addCase(WCase);

        ExploitAns answer = new ExploitAns("OK", 30, extras);
        answer.setResource(objective.getResource());
        answer.setContext(context);
        answer.init(map);
        String decision = answer.nextDecision(decisionManager, map);
        DecisionManager oracle = new DecisionManager();

        assertEquals(objective.getHarvestedAmount(), 9);
        assertEquals(decisionManager.count(), 1);
        assertEquals(oracle.getMoveJson(Direction.NORTH), decision);
    }

    @Test
    public void testNextDecisionWithExploitedCasesAround(){
        Mapper map = new Mapper(c);
        Case NCase = new Case(new ArrayList<Resource>(), null, 2);
        NCase.addBiome(new Biome(BiomeEnum.OCEAN, 100.0));
        NCase.setY(1);
        Case ECase = new Case(new ArrayList<Resource>(), null, 0);
        ECase.setX(1);
        Case SCase = new Case(new ArrayList<Resource>(), null, 6);
        SCase.addBiome(new Biome(BiomeEnum.BEACH, 100.0));
        SCase.setY(-1);
        Case WCase = new Case(new ArrayList<Resource>(), null, -3);
        WCase.setX(-1);

        map.addCase(NCase);
        map.addCase(ECase);
        map.addCase(SCase);
        map.addCase(WCase);

        ExploitAns answer = new ExploitAns("OK", 30, extras);
        answer.setResource(objective.getResource());
        answer.setContext(context);
        answer.init(map);
        String decision = answer.nextDecision(decisionManager, map);
        DecisionManager oracle = new DecisionManager();

        assertEquals(9, objective.getHarvestedAmount());
        assertEquals(2, decisionManager.count());
        assertEquals(oracle.getGlimpseJson(Direction.WEST, 4), decision);
    }

    @Test
    public void testEqualsAndHashcode() {
        String status = "status";
        ExploitExt exploitExt = new ExploitExt(10);
        ExploitAns x = new ExploitAns(status, 10, exploitExt);
        ExploitAns y = new ExploitAns(status, 10, exploitExt);
        StopDec z = new StopDec();
        Assert.assertTrue(x.equals(y) && y.equals(x));
        Assert.assertTrue(x.equals(x));
        Assert.assertFalse(x.equals(z));
        Assert.assertTrue(x.hashCode() == y.hashCode());
    }

    @Test
    public void testNumberAvailableTransfo() {
        Context context = new Context();
        context.setBudget(40);
        context.setMinimumBudget(30);
        context.setMen(1);
        context.setObjective(Arrays.asList(new Objective("PLANK", 5)));
        ExploitAns answer = new ExploitAns("status", 10, new ExploitExt(10));
        answer.setContext(context);
        int transfoAvailable = answer.numberTransformAvailable(context.getObjective().get(0));
        Assert.assertEquals(100,transfoAvailable);
    }

    @Test
    public void testDoPartial () {
        Context context = new Context();
        Objective objective = new Objective("PLANK", 40);
        objective.setLevel(2);
        Objective objectiveWood = new Objective("WOOD", 10);
        objectiveWood.setHarvestedAmount(10);
        context.setBudget(32);
        context.setMinimumBudget(30);
        context.setObjective(Arrays.asList(objective, objectiveWood));
        context.setMen(1);
        ExploitAns answer = new ExploitAns("status", 10, new ExploitExt(10));
        answer.setContext(context);
        answer.doPartialTransform(decisionManager, context.getObjective("PLANK"));
        Decision transformFur = new TransformDec(new TransformParameters(new Objective("WOOD", 5)));
        Assert.assertEquals(transformFur.toJSON(), decisionManager.getFirstDecisionJson());
    }

    /**
     * Test if we transform when we can do at least 2 transforms
     */
    @Test
    public void testTransformMinFactor() {
        Utils.init(); // Custom serialization transform
        Mapper map = new Mapper(new Case());
        DecisionManager dm = new DecisionManager();

        Context context = new Context();
        context.setBudget(100);
        context.setMinimumBudget(30);
        context.setMen(1);
        context.setObjective(new ArrayList<>(Arrays.asList(new Objective("LEATHER", 10), new Objective("FUR", 3))));
        context.updatePrimaryRes();
        assertEquals(33, context.getObjective("FUR").getAmount());

        ExploitAns ans = new ExploitAns("OK", 12, new ExploitExt(3));
        ans.setResource("FUR");
        ans.setContext(context);

        ans.init(map);
        ans.nextDecision(dm, map);
        DecisionManager oracle = new DecisionManager();
        Decision transformFur = new TransformDec(new TransformParameters(new Objective("FUR", 3)));
        assertNotEquals(transformFur.toJSON(), dm.getFirstDecisionJson());
        assertEquals(oracle.getGlimpseJson(Direction.NORTH, 4), dm.getFirstDecisionJson());
        assertNotEquals(1, dm.count());
        assertEquals(3, context.getObjective("FUR").getHarvestedAmount());
    }
}
